@import "../../../css/theme";

@mixin apply-hover-transition($initialBackgroundColor, $hoverColor) {
  position: relative;
  // background-clip: padding-box;
  z-index: 1;
  overflow: clip;

  &::before {
    // Circle shape
    content: "";
    position: absolute;
    bottom: calc(-300% - 0.5rem);
    right: -0.25rem;
    width: calc(100% + 0.5rem);
    height: calc(300% + 0.125rem);
    background-color: $hoverColor;
    border-radius: 50%;
    z-index: -1;
    box-sizing: border-box;
    transition: all 0.3s;
  }

  &::after {
    width: 100%;
    height: 100%;
    display: inline-block;
    content: "";
    position: absolute;
    left: 0;
    border-radius: var(--radius-large);
    background-color: $initialBackgroundColor;
    z-index: -2;
  }

  &:hover {
    &::before {
      // appear from bottom
      bottom: calc(-100%);
    }
  }
}

// BUTTON BASE STYLES

.button {
  button,
  label,
  a {
    font-family: "DM Sans", sans-serif;
    border-radius: var(--radius-large);
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    padding: 0;
    color: inherit;
    position: relative;
    width: max-content;
    line-height: 150%;
    letter-spacing: -0.03em;
    font-size: 1.125rem;
    font-weight: 500;
    @media (max-width: 37.5rem) {
      width: 100%;
      text-align: center;
      justify-content: center;
    }
    @media (min-width: 37.5rem) {
      padding: 1rem 3.5rem;
    }

    &:focus {
      outline: 0;
    }

    &:disabled {
      pointer-events: none;
    }

    & > span:has(svg) {
      display: flex;
    }

    svg {
      flex-shrink: 0;
    }
  }

  a {
    text-decoration: none;
  }

  button {
    border: 0;
    cursor: pointer;
  }
}

// BUTTON SIZES

.button-large {
  button,
  label,
  a {
    padding: 0 var(--spacing-responsive-2);
    min-height: calc(var(--spacing-responsive-2) + 0.5rem);
  }
}

.button-medium {
  button,
  label,
  a {
    padding: 0rem var(--spacing-7);
    min-height: calc(var(--spacing-responsive-1) + 0.5rem);
  }
}

.button-small {
  button,
  label,
  a {
    padding: 1rem var(--spacing-6);
  }
}

// BUTTON VARIANTS

.button-primary-red {
  @include apply-cta-primary-red;
  button,
  label,
  a {
    box-sizing: border-box;
    background-color: var(--cta-primary-default-background);
    color: var(--cta-primary-default-text);

    &:focus {
      color: var(--cta-primary-focused-text);
      // uses outline so border is internal
      outline: 0.25rem solid var(--cta-primary-focused-border);
      outline-offset: -0.249rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }
    &:hover,
    &:active {
      color: var(--cta-primary-hover-text);
      outline: 0;
    }

    @media (hover: hover) and (pointer: fine) {
      @include apply-hover-transition(
        var(--cta-full-background),
        var(--cta-primary-hover-background)
      );
    }
  }
}

// BUTTON PRIMARY FULL

.button-primary-full {
  @include apply-cta-primary-full;
  button,
  label,
  a {
    box-sizing: border-box;
    background-color: light-dark(
      var(--cta-primary-default-background),
      var(--cta-primary-default-background-dark-mode)
    );
    color: light-dark(
      var(--cta-primary-default-text),
      var(--cta-primary-default-text-dark-mode)
    );

    &:focus {
      color: light-dark(
        var(--cta-primary-focused-text),
        var(--cta-primary-focused-text-dark-mode)
      );
      // uses outline so border is internal
      outline: 0.25rem solid
        light-dark(
          var(--cta-primary-focused-border),
          var(--cta-primary-focused-border-dark-mode)
        );
      outline-offset: -0.249rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }
    &:hover,
    &:active {
      color: light-dark(
        var(--cta-primary-hover-text),
        var(--cta-primary-hover-text-dark-mode)
      );
      outline: 0;
    }

    @media (hover: hover) and (pointer: fine) {
      @include apply-hover-transition(
        light-dark(
          var(--cta-primary-default-background),
          var(cta-primary-default-background-dark-mode)
        ),
        light-dark(
          var(--cta-primary-hover-background),
          var(--cta-primary-hover-background-dark-mode)
        )
      );
    }
  }
}

// SECONDARY OUTLINE BUTTON

.button-secondary-outline {
  @include apply-cta-secondary-outline;
  button,
  label,
  a {
    box-sizing: border-box;
    background-color: light-dark(
      var(--cta-secondary-default-background),
      var(--cta-secondary-default-background-dark-mode)
    );
    color: light-dark(
      var(--cta-secondary-default-text),
      var(--cta-secondary-default-text-dark-mode)
    );
    outline: 0.0625rem solid
      light-dark(
        var(--cta-secondary-default-border),
        var(--cta-secondary-default-border-dark-mode)
      );
    outline-offset: -0.0615rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button

    &:focus {
      color: light-dark(
        var(--cta-secondary-focused-text),
        var(--cta-secondary-focused-text-dark-mode)
      );
      // uses outline so border is internal
      outline: 0.375rem solid
        light-dark(
          var(--cta-secondary-focused-border),
          var(--cta-secondary-focused-border-dark-mode)
        );
      outline-offset: -0.374rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }
    &:hover,
    &:active {
      color: light-dark(
        var(--cta-secondary-hover-text),
        var(--cta-secondary-hover-text-dark-mode)
      );
      outline: 0;
    }

    @media (hover: hover) and (pointer: fine) {
      @include apply-hover-transition(
        light-dark(
          var(--cta-secondary-default-background),
          var(cta-secondary-default-background-dark-mode)
        ),
        light-dark(
          var(--cta-secondary-hover-background),
          var(--cta-secondary-hover-background-dark-mode)
        )
      );
    }
  }
}

// SECONDARY LIGHT BUTTON

.button-secondary-light {
  @include apply-cta-secondary-light;
  button,
  label,
  a {
    box-sizing: border-box;
    background-color: light-dark(
      var(--cta-secondary-default-background),
      var(--cta-secondary-default-background-dark-mode)
    );
    color: light-dark(
      var(--cta-secondary-default-text),
      var(--cta-secondary-default-text-dark-mode)
    );
    outline: 0.0625rem solid
      light-dark(
        var(--cta-secondary-default-border),
        var(--cta-secondary-default-border-dark-mode)
      );
    outline-offset: -0.0615rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button

    &:focus {
      color: light-dark(
        var(--cta-secondary-focused-text),
        var(--cta-secondary-focused-text-dark-mode)
      );
      // uses outline so border is internal
      outline: 0.375rem solid
        light-dark(
          var(--cta-secondary-focused-border),
          var(--cta-secondary-focused-border-dark-mode)
        );
      outline-offset: -0.374rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }
    &:hover,
    &:active {
      color: light-dark(
        var(--cta-secondary-hover-text),
        var(--cta-secondary-hover-text-dark-mode)
      );
      outline: 0;
    }

    @media (hover: hover) and (pointer: fine) {
      @include apply-hover-transition(
        light-dark(
          var(--cta-secondary-default-background),
          var(cta-secondary-default-background-dark-mode)
        ),
        light-dark(
          var(--cta-secondary-hover-background),
          var(--cta-secondary-hover-background-dark-mode)
        )
      );
    }
  }
}

// TERTIARY LIGHT OUTLINE BUTTON

.button-tertiary-light-outline {
  @include apply-cta-tertiary-light-outline;
  button,
  label,
  a {
    box-sizing: border-box;
    background-color: light-dark(
      var(--cta-tertiary-default-background),
      var(--cta-tertiary-default-background-dark-mode)
    );
    color: light-dark(
      var(--cta-tertiary-default-text),
      var(--cta-tertiary-default-text-dark-mode)
    );
    outline: 0.0625rem solid
      light-dark(
        var(--cta-tertiary-default-border),
        var(--cta-tertiary-default-border-dark-mode)
      );
    outline-offset: -0.0615rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button

    &:focus {
      color: light-dark(
        var(--cta-tertiary-focused-text),
        var(--cta-tertiary-focused-text-dark-mode)
      );
      // uses outline so border is internal
      outline: 0.375rem solid
        light-dark(
          var(--cta-tertiary-focused-border),
          var(--cta-tertiary-focused-border-dark-mode)
        );
      outline-offset: -0.374rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }
    &:hover,
    &:active {
      color: light-dark(
        var(--cta-tertiary-hover-text),
        var(--cta-tertiary-hover-text-dark-mode)
      );
      outline: 0.0625rem solid
        light-dark(
          var(--cta-tertiary-hover-border),
          var(--cta-tertiary-hover-border-dark-mode)
        );
      outline-offset: -0.0615rem; // 0.001rem less than outline width to prevent a dark sub pixel halo around the button
    }

    @media (hover: hover) and (pointer: fine) {
      @include apply-hover-transition(
        light-dark(
          var(--cta-tertiary-default-background),
          var(cta-tertiary-default-background-dark-mode)
        ),
        light-dark(
          var(--cta-tertiary-hover-background),
          var(--cta-tertiary-hover-background-dark-mode)
        )
      );
    }
  }
}

// .button-full-dark {
//   @include apply-cta-full-dark;
//   button,
//   label,
//   a {
//     background-color: var(--cta-full-background);
//     color: var(--cta-full-text);
//     border: 1px solid var(--cta-full-border);
//     @media (hover: hover) and (pointer: fine) {
//       @include apply-hover-transition(
//         var(--cta-full-background),
//         var(--cta-full-hover-background)
//       );

//       &:hover {
//         color: var(--cta-full-hover-text);
//         border-color: var(--cta-full-hover-border);
//       }
//     }
//   }
// }

// .button-full-light {
//   @include apply-cta-full-light;
//   button,
//   label,
//   a {
//     background-color: var(--cta-full-background);
//     color: var(--cta-full-text);
//     border: 1px solid var(--cta-full-border);

//     @media (hover: hover) and (pointer: fine) {
//       @include apply-hover-transition(
//         var(--cta-full-background),
//         var(--cta-full-hover-background)
//       );

//       &:hover {
//         color: var(--cta-full-hover-text);
//         border-color: var(--cta-full-hover-border);
//       }
//     }
//   }
// }

// .button-outline-dark {
//   @include apply-cta-outline-dark;
//   button,
//   label,
//   a {
//     background-color: transparent;
//     color: var(--cta-outline-text);
//     border: 1px solid var(--cta-outline-border);

//     @media (hover: hover) and (pointer: fine) {
//       @include apply-hover-transition(
//         var(--cta-outline-background),
//         var(--cta-outline-hover-background)
//       );

//       &:hover {
//         color: var(--cta-outline-hover-text);
//         border-color: var(--cta-outline-hover-border);
//       }
//     }
//   }
// }

// .button-outline-light {
//   @include apply-cta-outline-light;
//   button,
//   label,
//   a {
//     background-color: transparent;
//     color: var(--cta-outline-text);
//     border: 1px solid var(--cta-outline-border);

//     @media (hover: hover) and (pointer: fine) {
//       @include apply-hover-transition(
//         var(--cta-outline-background),
//         var(--cta-outline-hover-background)
//       );

//       &:hover {
//         color: var(--cta-outline-hover-text);
//         border-color: var(--cta-outline-hover-border);
//       }
//     }
//   }
// }

.button-full-width {
  a,
  button,
  label {
    width: 100%;
    justify-content: center;
  }
}
